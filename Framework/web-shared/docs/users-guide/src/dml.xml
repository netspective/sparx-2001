<chapter>
    <title>Manipulating Relational Data: Inserts, Updates, and Deletes </title>
    <section>
        <title>Overview</title>
        <para>
        &product-name; provides a JSP custom tag called <emphasis role="bold">&lt;xaf:dml&gt;</emphasis>
        for database actions concerning inserts, updates and deletes. Unlike the static queries, there is no
        statement definitions in a XML file. The actual data modification statement is generated by &product-name;
        and the user needs only to specify the action type and the columns to modify.
        The common usage of a data modification action is to bind it to a dialog submit action. This way when the
        dialog is submitted, the fields entered by the user is committed to the database. 
        The <emphasis role="bold">&lt;xaf:dml&gt;</emphasis> custom tag has an attribute called 
        <sgmltag class="attribute">command</sgmltag> which specifies the data modification action type.
        </para>
    </section>


    <section>
        <title>Insert and Update Action</title>
        <para>
        There are three values available for the DML <sgmltag class="attribute">command</sgmltag> attribute
        to perform insert and update actions: <emphasis>insert-or-update</emphasis>, 
        <emphasis>insert</emphasis>, and <emphasis>update</emphasis>. The <emphasis>insert-or-update</emphasis>
        will update existing data and if the data doesn't exist, it will automatically insert new data.
        
        
        The following is an example of a <emphasis>insert-or-update</emphasis> action DML which
        accepts the input data from a dialog:
        <programlisting>
    <![CDATA[        
    <xaf:dialog name="test.demographics">
        <%
        String whereStr = "lastName = 'Smith'";
        %>
        <xaf:dml dataSource="session:myDataSource"
                command="insert-or-update"
                table="demographics"
                fields="address,city,state,zipcode"
                where="<%= whereStr %>"
                debug="no" />
    </xaf:dialog>            
    ]]>
        </programlisting>

        As shown above, there are other attributes which are available for the <emphasis role="bold">&lt;xaf:dml&gt;</emphasis> custom tag.
        <variablelist>            
            <varlistentry>
                <term> <sgmltag class="attribute">dataSource</sgmltag></term>                
                <listitem>
                    <para>
                    Specifies which data source to perform the action on(if it is not defined, the action will be performed
                    on the default data source defined in <filename class="conf">WEB-INF/web.xml</filename>) 
                    </para>
                </listitem>
            </varlistentry>        
            <varlistentry>
                <term> <sgmltag class="attribute">table</sgmltag></term>                
                <listitem>
                    <para>
                    Specifies which database table to modify.
                    </para>
                </listitem>
            </varlistentry>        
            <varlistentry>
                <term> <sgmltag class="attribute">fields</sgmltag></term>                
                <listitem>
                    <para>
                    Specifies which database table columns to modify. The syntax for the value of 
                    this attribute is <emphasis>"dialog-field-id=database-column-name"</emphasis>
                    (seperated by commas for multiple columns). If the dialog's field id is the same 
                    as the database column name, then only the <emphasis>"database-column-name"</emphasis>
                    suffices as shown in the example above. If one wishes to literally specify a 
                    value for the database column name instead of a dialog field value, then the 
                    value source <emphasis>custom-sql</emphasis> can be used.
                    </para>
                </listitem>
            </varlistentry>               
            <varlistentry>
                <term> <sgmltag class="attribute">where</sgmltag></term>                
                <listitem>
                    <para>
                    Specifies the condition criteria (the SQL WHERE clause). The value for this attribute is totally dependent
                    upon the developer. It accepts a string to append after the "<emphasis>where</emphasis>"
                    SQL keyword. The example above retrieves the string from a Java variable.
                    </para>
                </listitem>
            </varlistentry>             
            <varlistentry>
                <term> <sgmltag class="attribute">debug</sgmltag></term>                
                <listitem>
                    <para>
                    Specifies the whether or not to exeucte the SQL action or not. If the value is set to
                    <emphasis>"yes:</emphasis>, then the generated DML SQL is displayed instead of 
                    executing it.
                    </para>
                </listitem>
            </varlistentry>                 
        </variablelist>        

        </para>
    </section>

    <section>
        <title>Delete Action</title>
        <para>
        The value for the attribute <sgmltag class="attribute">command</sgmltag> for a delete action
        is <emphasis>remove</emphasis>. The following is an example of a delete action:
        <programlisting>
    <![CDATA[        
        <%
        String whereStr = "lastName = 'Smith'";
        %>    
        <xaf:dml dataSource="session:myDataSource"
                command="remove"
                table="demographics"                
                where="<%= whereStr %>"
                debug="no" />

    ]]>        
        </programlisting>
        There is no need to specify the <sgmltag class="attribute">fields</sgmltag> attribute for delete actions.
        The other attributes function the same way as exaplained in the insert and update action section.
        </para>
    </section>
    
    <section>
        <title>Transactions</title>
        <para>
        &product-name; provides a JSP custom tag called <emphasis role="bold">&lt;xaf:transaction&gt;</emphasis>
        for defining database transactions. Any DML custom tags within the start and end custom tags for
        the transaction will belong to a transaction. They share the same database connection and if there
        are any errors, all actions will be rolled back. For example:
        <programlisting>       
    <![CDATA[        
    <xaf:tranaction>
        <xaf:query name="Test.TestQuery" report="none" store="single-column" 
            storeType="request-attr:lastName" debug="no"/>
        <%
        String whereStr = "lastName = '"+ (String)request.getAttribute("lastName") + "'";
        %>      
        <xaf:dml dataSource="session:myDataSource"
                command="remove"
                table="user"                
                where="<%= whereStr %>"
                debug="no" />        
        <xaf:dml dataSource="session:myDataSource"
                command="remove"
                table="demographics"                
                where="<%= whereStr %>"
                debug="no" />
                
    </xaf:transaction>
    ]]>         
        </programlisting>
        The above example retrieves a last name using a defined query and then removes data from two 
        tables, <emphasis>user</emphasis> and <emphasis>demographics</emphasis>, using the last name
        as a selection criteria. All three actions are within a transaction and if any one had failed
        during the transaction, all actions would have been rolled back.
        </para>
    </section>    
</chapter>