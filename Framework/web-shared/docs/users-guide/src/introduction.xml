<chapter>
 	<title>Introduction</title>

	<section>
		<title>Overview</title>
		<para>
			Welcome to the Sparx eXtensible Application Framework (XAF) Documentation.
			The XAF is a pure Java, Servlet, XML, XSLT, and JSP-based RAD tool for building highly
			interactive and dynamic web applications. The objective of XAF is to allow
			enterprises to build and deploy more web applications using fewer programmers,
			less time, with higher-quality, and better documentation than using Java and
			Servlet engines alone. Some of our customers have been able to cut their
			development budgets in half by reducing the number or qualifications of their
			programmers. This is because XAF allows junior and mid-level Java developers
			to be as or more effective than senior and more experienced developers.
		</para>
		<para>
			Unlike web <emphasis>site</emphasis> development tools which focus more on presentation and
			less on business logic, XAF helps construct powerful data aggregation and
			interactive forms-based data-driven web <emphasis>applications</emphasis>.
		</para>
	</section>

	<section>
		<title>Benefits</title>
		<itemizedlist>
			<listitem>
				Application Programmers spend time on real features significant to end-users instead
				of infrastructure issues significant only to programmers.
			</listitem>
			<listitem>
				Most of the user interface and database logic is coded in a declarative style using
				XML instead of programmatic style using Java. This significantly reduces the amount
				of code (as much as 50-75% of code can be eliminated)
			</listitem>
			<listitem>
				Applications are built by assembling declared UI (forms/dialogs) and database (SQL)
				components combined with application-specific business logic.
			</listitem>
			<listitem>
				Sparx is not a templating system that simply generates HTML but a feature-rich
				framework that significantly reduces the time to produce high-quality data-intensive
				thin-client applications.
			</listitem>
		</itemizedlist>
	</section>

	<section>
		<title>Significant Features</title>
		<section>
			<title>Application Components Explorer (ACE)</title>
			<section>
				<title>Automatic Implementation Documentation</title>
				<para>
				Instead of having to create functional specifications and other implementation
				documentation manually, XAF provides the ACE to automatically document
				(using the XML definitions and XSLT stylesheets) all the forms (web
				dialogs), sql statements, schema objects, and other programming artifacts
				in a centralized browser-based interface. Developers concentrate on application
				creation while XAF automatically documents their work. Managers can use
				this documention in a real-time basis to track programmer work and productivity.
				</para>
			</section>
			<section>
				<title>Interactive Testing</title>
				<para>
				While developers are working on forms and SQL statements, ACE automatically
				provides browser-based testing of the forms and statements. No servlets,
				or JSPs need to be written for basic testing of forms, validations, and
				SQL statements. Once initial testing is completed and requirements are
				solidified, then the forms and statements can be aggregated to create
				interactive applications. End users can use the interative testing tools
				to see code as it is being developed (supporting eXtreme Programming concepts).
				</para>
			</section>
			<section>
				<title>Centralized Project Documentation</title>
				<para>
				ACE provides a centralized location for all project documentation for any
				application. Instead of storing application code and programmer documentation
				separately, ACE brings tag documentation, javadocs, MS Office documents,
				and other project documents into a single easily-accessible place. Managers
				will no longer need to hunt for documents.
				</para>
			</section>
		</section>

		<section>
			<title>Data Entry, UI, and Forms Management</title>
			<section>
				<title>XML-based Web Dialogs</title>
				<para>
				XAF calls all forms "Dialogs" and dialogs are can be defined completely in XML.
				This includes labels, captions, validation logic, conditional displays,
				and other advanced UI features. By keeping the entire definition in XML,
				non-programmers or junior engineers can create forms and more experienced
				developers can attach business logic.
				</para>
			</section>
			<section>
				<title>Data Persistance</title>
				<para>
				As a user enters data, values persist through pages. This is especially
				useful for HTTP stateless programming where reporting errors requires
				pages to be redrawn. <emphasis>Data Persistance</emphasis> allows developers to refresh
				pages and have data automatically filled into controls.
				</para>
			</section>
			<section>
				<title>Server-side Data Binding to HTML controls</title>
				<para>
				XAF allows almost any SQL or other data binding to any list controls in
				HTML or DHTML. This allows, for instance a query to be run and automatically
				create a list box, radio buttons, check boxes, and multi-select list boxes.
				</para>
			</section>
			<section>
				<title>Automatic Validation</title>
				<para>
				XAF provides detailed client- and server-side validation logic for text,
				date, numeric, and other user-defined fields. All fields in XAF are object-
				oriented and know how to draw themselves onto HTML and DHTML browsers.
				</para>
			</section>
			<section>
				<title>Skins and unlimited HTML and DHTML controls</title>
				<para>
				XAF separates presentation from forms design and logic by automatically
				creating all HTML and DHTML in user-defined "skin" objects. The skins
				perform all drawing operations while the forms objects manage all of the
				fields and validation. One immediate benefit of skins is the ability to
				design and describe a dialog once and exectute it on mobile, small form-
				factors (handhelds), notebooks, and desktops.
				</para>
			</section>
			<section>
				<title>Form Objects</title>
				<para>
				Once defined in either XML or Java, each form becomes a Dialog <emphasis>Object</emphasis>
				that persists throughout each servlet request. This design significantly
				improves performance because form construction is required only once during
				the execution of the application.
				</para>
			</section>
			<section>
				<title>Transaction Integrity</title>
				<para>
				All XAF dialogs have unique identifiers at both development and run-time.
				Features are provided to prevent duplicate data entry through the use of
				Dialog Transactions (preventing users from hitting the "back" button and
				re-running an older transaction).
				</para>
			</section>
		</section>

		<section>
			<title>SQL and Data Management</title>
			<section>
				<title>SQL Statement Pooling</title>
				<para>
				To encourage reusability and encapsulation and reduce the amount of time
				spent creating "data beans", XAF allows all SQL statements and
				dynamic parameters used in a project to be specified in one or more
				SQL files. Once defined, a single or multiple SQL statements may be used
				in reports, dialogs (forms), Servlets, or JSP-pages. In many cases, SQL
				statement pooling completely replaces simple data-serving beans since
				data objects are automatically created for all SQL statements.
				</para>
			</section>
			<section>
				<title>Data Aggregation</title>
				<para>
				Data can be easily aggregated from multiple data sources because each
				SQL statement in the statement pool can be specified (either in XML or
				JSP) to come from a variety of pre-defined or dynamic data sources.
				</para>
			</section>
			<section>
				<title>SQL DML Generation</title>
				<para>
				JSP custom tags and java classes are provided to automatically create
				SQL insert/update/remove DML (Data Manipulation Language) commands. By
				providing simple name/value pairs of data, XAF can automatically generate
				complex DML statements.
				</para>
			</section>
			<section>
				<title>SQL Select Generation</title>
				<para>
				A powerful XML-based tool called <emphasis>Query Definitions</emphasis> allows developers
				to define tables, columns, joins, sort orders, and other important data
				through the use of Meta Information about data relationships. Once a
				a developer creates a query definition, XAF allows end-users to use simple
				HTML-based forms to automatically generate SQL accurate and performance-tuned
				statements to create paged reports or export data to external sources.
				</para>
			</section>
			<section>
				<title>Data Caching</title>
				<para>
				XAF allows SQL statements and other data sources to be cached with
				configurable time-outs. This is useful for seldom- or slowly-changing
				data that should not be retrieved from a database for each call.
				</para>
			</section>
		</section>

		<section>
			<title>Report Writing and Data Presentation</title>
			<section>
				<title>XML-based Report Definitions</title>
				<para>
				XAF reports are defined completely in XML. This includes headings, banners,
				column types, calculations, grouping, sort order, etc. By keeping the entire
				definition in XML, 	non-programmers or junior engineers can create report
				definitions and more experienced developers can attach business logic.
				</para>
			</section>
			<section>
				<title>Multiple Source Reports</title>
				<para>
				The data for reports can come from a single or multiple SQL data source,
				object arrays, or virtually and dynamic data source. A single XML-based
				report definition can server a variety of
				</para>
			</section>
			<section>
				<title>Skins for Multiple Output Destinations</title>
				<para>
				XAF uses special skins for automatically presenting reports in suitable
				formats; for instance, XAF reports can be formatted for HTML, PDF, ASCII,
				or any other user-defined format by creating appropriate skins. The same
				report definition will be able to support access on mobile devices, hand-held
				PDAs, notebooks, and desktops.
				</para>
			</section>
		</section>

		<section>
			<title>Schema Objects and DDL Generation</title>
			<section>
				<title>XML-based Schema Creation</title>
				<para>
				Create entire relational database schemas (tables, columns, data dictionaries, etc) in
				XML. Describing complete schemas in XML prevents database-specific data
				definitions and allows greater database vendor independence.
				</para>
			</section>
			<section>
				<title>Object-based Relational Tables</title>
				<para>
				Allows object-oriented concepts to be applied to traditional, non object-
				oriented databases like MySQL, SQL Server, and Oracle. All the object
				definitions are provided in XML but when the relational data definition
				is created, they become portable table/column definitions. Data type
				inheritance and table inheritance is supported in all databases
				like MySQL, Access, Oracle, SQL Server, and FoxPro (through JDBC).
				</para>
			</section>
			<section>
				<title>DDL Generation</title>
				<para>
				All tables and columns defined in XML can be easily "converted" to
				vendor-specific SQL DDL (data definition language). All create table,
				alter table, constraint, foreign-key, and index commands are supported
				and automatically generated for even complex relationships.
				</para>
			</section>
			<section>
				<title>Schema Objects</title>
				<para>
				When the XAF Schema Objects features are used, the application has full
				access to cached schema information about all tables, columns, descriptions,
				relationships, and other features. This allows schema access for automated forms
				building, report building, and tighter integration with data structures when
				appropriate.
				</para>
			</section>
		</section>

		<section>
			<title>Personalization, Security, and Access Control</title>
			<section>
				<title>Personalization</title>
				<para>
				All XAF applications support personalization features that allow applications
				to respond differently to differnent users based on location, user type,
				or user names.
				</para>
			</section>
			<section>
				<title>Access Control Lists (ACLs)</title>
				<para>
				Centralized ACLs allow developers to restrict access to forms, reports,
				pages, and other resources based on user names, types, location, roles,
				capabilities, or other permissions.
				</para>
			</section>
		</section>
	</section>
</chapter>