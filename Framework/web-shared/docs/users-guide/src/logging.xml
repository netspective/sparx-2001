<chapter>
	<title>Logging</title>

    <section>
        <title>Overview</title>
        <para>
        Application logging provides developers with detailed context for application failures or problems.
        This is why &framework-name;'s logging mechanism for keeping track of
        database and JSP accesses is a very important tool useful for both development
        and production phases of a product. The main advantage of &framework-name;'s logging mechanism is that it takes away having
        to insert log statements into code for debugging it.

        Each JSP file loading time can be
        <quote>broken</quote> down to the dialog level to so that web developers can track
        exactly which part of the JSP is the cause of long page loads. For security reasons, JSP
        access logging can also include accessing user information such as permission/access level and machine name.
        Logged database connection times and SQL statement execution times provided by &framework-name; are also
        crucial for developers who need to investigate database
        performance issues. Also the logging behavior can be controlled by editing a configuration file,
        without touching the application code.
        </para>
    </section>

    <section>
        <title>Configuration<title>
        <para>
        The central configuration file for &framework-name; logging is called
        <filename class="conf">log4j.properties</filename> and it is required to be in
        <filename class="directory">web-app\Site\WEB-INF\classes</filename> directory.
        This file contains configurations to describe location of the log files
        and the level of logging (how detailed) required.
        </para>
    </section>


    <section>
        <title>SQL Logging</title>
        <para>

        </para>
    </section>

    <section>
        <title>Page Logging</title>
        <para>
            There are two parts to logging events with respect to the application's JSPs: debugging and monitoring.
            The debugging level will log exceptions that are thrown during any page access while the monitoring
            level will log every page access. Page monitoring of a web application can be triggered by calling the
            <methodname>doPageBegin()</methodname> and <methodname>doPageEnd()</methodname> methods
            of <classname>com.xaf.navigate.taglib.PageTag</classname>. It is recommended that applications should
            subclass this class to create their own page custom tag handling Java class. The logging methods
            should be called in the respective <methodname>doStartTag()</methodname> and
            <methodname>doEndTag()</methodname>  methods. For example:
            <programlisting>
            <![CDATA[
public class PageTag extends com.xaf.navigate.taglib.PageTag
{
    ...
    public int doStartTag() throws JspException
    {
        doPageBegin();
        ...
    }
    ..
    public int doEndTag() throws JspException
    {
        ...
        doPageEnd();
        return ...
    }
}
            ]]>
            </programlisting>
            Both types of log files can be viewed through &explorer-name;
            by using the
            <menuchoice>
                <guimenu>Application</guimenu>
                <guimenuitem>Logs</guimenuitem>
                <guisubmenu>xaf.debug.page</guisubmenu>
            </menuchoice>
            and
            <menuchoice>
                <guimenu>Application</guimenu>
                <guimenuitem>Logs</guimenuitem>
                <guisubmenu>xaf.monitor.page</guisubmenu>
            </menuchoice>
            menu items.
        </para>
    </section>

    <section>
        <title>Security Logging</title>
        <para>
        There are two parts to logging events with respect to application security: debugging and monitoring.
        The debug level create logs that are useful for text-based debug style messages (no special formatting of messages)
        and it records user's role, permissions, and session id. The monitor level logs are created to allow further
        analysis of recorded data and they are formatted. Both types of log files can be viewed through &explorer-name;
        by using the
        <menuchoice>
            <guimenu>Application</guimenu>
            <guimenuitem>Logs</guimenuitem>
            <guisubmenu>xaf.debug.security</guisubmenu>
        </menuchoice>
        and
        <menuchoice>
            <guimenu>Application</guimenu>
            <guimenuitem>Logs</guimenuitem>
            <guisubmenu>xaf.monitor.security</guisubmenu>
        </menuchoice>
        menu items.
        </para>
    </section>

</chapter>