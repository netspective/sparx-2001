<?xml version="1.0" encoding="utf-8"?>
<!-- ===================================================================

Build file for Sparx - for use with the Jakarta Ant java build tool

Setup instructions:
    Before running an Ant build, you must
     - set the JAVA_HOME environment variable to the JDK root directory
     - set the ANT_HOME environment variable to the Ant root directory
     - set CLASSPATH with all required libraries:
       * Apache Xerces 1.4 or above (http://xml.apache.org)
       * Apache Xalan 2.1 or above (http://xml.apache.org)
       * Jakarta ORO Matcher 2.0 or above (http://jakarta.apache.org)
       * Jakarta Log4J 1.1 or above (http://jakarta.apache.org)
       * Java Servlet API 2.2 or above (http://java.sun.com)
       * Java JDBC 2.0 Standard Extensions (http://java.sun.com)

Build Instructions:
   To build, run
     build.bat (win32) or build.sh (unix) - optionally with a target arg as indicated below -
   in the directory where this file is located.

Build targets:
    This build file supports the following targets:
    - compile   compiles Sparx in ../build/classes.
    - jar       jars XAF classes from ../build/classes into ../lib/sparx.jar.
    - sparx     creates ../lib/sparx.jar [the default target]
    - kit-eval  creates ../sparx-x.y.z.zip

-->
<project name="Sparx" default="sparx">

    <property environment="env"/>
    <property name="build.compiler" value="jikes"/>

    <target name="check-java-home">
        <condition property="java.home.exists">
            <or>
                <available file="${env.JAVA_HOME}/bin/javac"/>
                <available file="${env.JAVA_HOME}/bin/javac.exe"/>
            </or>
        </condition>
        <fail message="JAVA_HOME is not set to a valid JDK directory." unless="java.home.exists"/>
        <echo message="JAVA_HOME is ${env.JAVA_HOME}"/>
    </target>
    
    <target name="init" depends="check-java-home">

        <path id="sparx.home.path">
            <pathelement location="${env.SPARX_HOME}"/>
        </path>
        <pathconvert targetos="unix" property="sparx.home" refid="sparx.home.path"/>

        <path id="project.class.path">
            <fileset dir="${sparx.home}/lib/redist">
                <include name="**/*.jar"/>
            </fileset>
        </path>

        <property name="build.dir" value="../build"/>
        <property name="build.classes.dir" value="${build.dir}/classes"/>
        <property name="lib.dir" value="../lib"/>
        <property name="kit.dir" value="../kit"/>

        <delete dir="${build.dir}"/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.classes.dir}"/>
        <mkdir dir="${lib.dir}"/>
        <mkdir dir="${kit.dir}"/>

        <!-- set the build.number property -->
        <buildnumber file="build.number"/>

        <property name="build.log.class.package" value="com.netspective.sparx"/>
        <property name="build.log.class.name" value="BuildLog"/>

        <property name="debug" value="on"/>
        <property name="optimize" value="true"/>

        <!-- Compile the Ant utility classes -->
        <javac srcdir="com/netspective/sparx" destdir="${build.classes.dir}" 
            includes="util/ClassPath.java,util/ant/GenerateBuildLogClassTask.java"
            debug="${debug}" optimize="${optimize}" deprecation="on"
            classpathref="project.class.path"
            />

        <taskdef name="gblc" classname="com.netspective.sparx.util.ant.GenerateBuildLogClassTask" classpath="${build.classes.dir}" classpathref="project.class.path"/>
        <gblc package="${build.log.class.package}" class="${build.log.class.name}"/>
        <echo message="Built on ${build.log.date} (host=${build.log.host.name}; ip=${build.log.host.ip})"/>

        <!-- Compile the BuildConfiguration and other Ant utility class -->
        <javac srcdir="com/netspective/sparx" destdir="${build.classes.dir}"
            includes="BuildLog.java,BuildConfiguration.java,util/ant/BuildConfigurationTask.java,util/ant/ClassPathTask.java"
            debug="${debug}" optimize="${optimize}" deprecation="on"/>

        <!-- put the build configuration items into the properties (com.netspective.sparx.util.ant.BuildConfigurationTask) -->
        <taskdef name="config" classname="com.netspective.sparx.util.ant.BuildConfigurationTask" classpath="${build.classes.dir}" classpathref="project.class.path"/>
        <config/>

        <!-- show the current class path and optimize it -->
        <taskdef name="cp" classname="com.netspective.sparx.util.ant.ClassPathTask" classpath="${build.classes.dir}" classpathref="project.class.path"/>
        <cp listall="yes" additionalref="project.class.path"/>

        <property name="lib-ext.dir" value="${lib.dir}/${build.libitem.path.prefix}"/>
        <mkdir dir="${lib-ext.dir}"/>

        <property name="web-shared.dir" value="../web-shared"/>
        <property name="web-shared.dirname" value="web-shared"/>
        <property name="web-shared.versioned.dirname" value="web-shared-${build.libitem.path.prefix}"/>
        <property name="doc.dir" value="../documentation"/>
        <property name="javadoc.dir" value="${doc.dir}/javadoc"/>

        <property name="jar.prefix" value="${build.libitem.file.prefix}"/>
        <property name="lib.jar" value="${jar.prefix}.jar"/>
        <property name="doc.jar" value="${jar.prefix}_doc.jar"/>
        <property name="web-shared.zip" value="${jar.prefix}_web-shared.zip"/>
    </target>

    <!-- ============================= Build Sparx ========================= -->
    <target name="compile" depends="init">

        <!-- Compile Sparx components -->
        <javac srcdir="." destdir="${build.classes.dir}"
            debug="${debug}"
            optimize="${optimize}"
            deprecation="off"
            classpathref="project.class.path">
        </javac>

        <echoproperties destfile="${web-shared.dir}/resources/sparx.build.properties"/>

    </target>

    <!-- ============================= Jar Sparx ========================= -->
    <target name="jar" depends="compile">

        <!-- Create Sparx BINARIES JAR file -->
        <jar jarfile="${lib-ext.dir}/${lib.jar}" basedir="${build.classes.dir}">
            <include name="com/netspective/sparx/**"/>
        </jar>

        <!-- copy the version-specific jar -->
        <copy file="${lib-ext.dir}/${lib.jar}" tofile="${lib.dir}/${lib.jar}"/>

        <!-- copy the latest jar (for people who don't care about the version) -->
        <copy file="${lib-ext.dir}/${lib.jar}" tofile="${lib.dir}/sparx.jar"/>
    </target>

    <!-- ============================= JavaDoc Sparx ========================= -->
    <!-- Add Sparx internal javadoc -->
    <target name="javadoc" depends="init">
        <mkdir dir="${javadoc.dir}" />
        <javadoc packagenames="com.netspective.sparx.*"
             sourcepath="."
             classpathref="project.class.path"
             destdir="${javadoc.dir}"
             author="true"
             version="true"
             use="true"
             windowtitle="Sparx API"
             doctitle="Sparx API Documentation"
             bottom="Copyright &#169; 2001 Netspective. All Rights Reserved."
        />
        <jar jarfile="${lib-ext.dir}/${doc.jar}" basedir="${javadoc.dir}" >
            <include name="**" />
        </jar>

        <copy file="${lib-ext.dir}/${doc.jar}" tofile="${lib.dir}/${doc.jar}"/>

    </target>

    <!-- ============================= JavaDoc Sparx ========================= -->

    <target name="web-shared" depends="init">
        <!-- store two copies of the ZIP file:
             1) a zip file with web-shared as the path prefix
             2) a zip file with web-shared-[version] as the path prefix
        -->
        <zip zipfile="${lib.dir}/${web-shared.zip}">
            <zipfileset dir="${web-shared.dir}" prefix="${web-shared.dirname}"/>
        </zip>
        <zip zipfile="${lib-ext.dir}/${web-shared.zip}">
            <zipfileset dir="${web-shared.dir}" prefix="${web-shared.versioned.dirname}"/>
        </zip>
    </target>

    <!-- ==================== Deployment/kitting targets  =================== -->
       
    <target name="kit-eval" depends="init">
        <property name="kit.base-dir-name" value="${build.libitem.file.prefix}"/>
        <property name="kit.full-name" value="${kit.dir}/${kit.base-dir-name}.zip"/>

        <delete file="${kit.full-name}"/>
        <zip destfile="${kit.full-name}">
            <zipfileset dir="../lib" includes="sparx.jar" prefix="${kit.base-dir-name}/lib"/>
            <zipfileset dir="../lib/redist" prefix="${kit.base-dir-name}/lib/redist"/>
            <zipfileset dir="../tools" includes="app-build.*,new-sparx-app*" prefix="${kit.base-dir-name}/tools"/>
            <zipfileset dir="../web-shared" prefix="${kit.base-dir-name}/web-shared"/>
        </zip>
    </target>

    <target name="kit-eval-full" depends="init">        
    	<property name="kit.build.dir" value="${kit.dir}/kit-eval-build"/>    	
        <property name="kit.full-name" value="${kit.dir}/${build.libitem.file.prefix}-eval"/>
        <property name="kit.base-dir-name" value="Netspective"/>
        <property name="kit.sparx-dir-name" value="${kit.base-dir-name}/${build.libitem.file.prefix}"/>
        <property name="kit.resin-version" value="2.1.5"/>
        <property name="kit.resin-dir-name" value="${kit.base-dir-name}/resin-${kit.resin-version}"/>
        <property name="kit.samples.stage.dir" value="${kit.build.dir}/samples"/>
        <property name="sparx.samples.dir" value="../.."/>

        <delete dir="${kit.build.dir}"/>
        
        <copy todir="${kit.build.dir}/${kit.base-dir-name}">
            <fileset dir="../documentation">
                <include name="*.pdf"/>
            </fileset>
        </copy>
        <copy todir="${kit.build.dir}/${kit.sparx-dir-name}/lib">
            <fileset dir="../lib" includes="sparx.jar"/>
        </copy>
        <copy todir="${kit.build.dir}/${kit.sparx-dir-name}/lib/redist">
            <fileset dir="../lib/redist"/>
        </copy>
        <copy todir="${kit.build.dir}/${kit.sparx-dir-name}/tools">
            <fileset dir="../tools" includes="app-build.*,new-sparx-app*"/>
        </copy>
        <copy todir="${kit.build.dir}/${kit.sparx-dir-name}/web-shared">
            <fileset dir="../web-shared"/>
        </copy>
        		
		<property name="sparx.cvs.root" value=":pserver:shahid.shah@localhost:/home/netspective/cvs/Sparx"/>
		
		<cvs command="checkout" package="hello" dest="${kit.samples.stage.dir}" 
				cvsRoot="${sparx.cvs.root}"
				compressionlevel="9" failonerror="yes" quiet="yes"/>
				
		<cvs command="checkout" package="library" dest="${kit.samples.stage.dir}" 
				cvsRoot="${sparx.cvs.root}"
				compressionlevel="9" failonerror="yes" quiet="yes"/>

		<cvs command="checkout" package="cura" dest="${kit.samples.stage.dir}" 
				cvsRoot="${sparx.cvs.root}"
				compressionlevel="9" failonerror="yes" quiet="yes"/>

		<property name="sparx.home.replace.file.bat" value="WEB-INF/build.bat"/>
		<property name="sparx.home.replace.token.bat" value="SPARX_HOME=..\..\Sparx"/>
		<property name="sparx.home.replace.value.bat" value="SPARX_HOME=..\..\..\..\${build.libitem.file.prefix}"/>

		<property name="sparx.home.replace.file.sh" value="WEB-INF/build.sh"/>
		<property name="sparx.home.replace.token.sh" value="SPARX_HOME=$BASEDIR/../../Sparx"/>
		<property name="sparx.home.replace.value.sh" value="SPARX_HOME=$BASEDIR/../../../../${build.libitem.file.prefix}"/>

		<replace file="${kit.samples.stage.dir}/hello/${sparx.home.replace.file.bat}" token="${sparx.home.replace.token.bat}" value="${sparx.home.replace.value.bat}" summary="yes"/>
		<replace file="${kit.samples.stage.dir}/hello/${sparx.home.replace.file.sh}" token="${sparx.home.replace.token.sh}" value="${sparx.home.replace.value.sh}" summary="yes"/>

		<replace file="${kit.samples.stage.dir}/library/${sparx.home.replace.file.bat}" token="${sparx.home.replace.token.bat}" value="${sparx.home.replace.value.bat}" summary="yes"/>
		<replace file="${kit.samples.stage.dir}/library/${sparx.home.replace.file.sh}" token="${sparx.home.replace.token.sh}" value="${sparx.home.replace.value.sh}" summary="yes"/>
		<replace file="${kit.samples.stage.dir}/library/WEB-INF/web.xml" token="&lt;init-param url=&quot;jdbc:hsqldb:c:\Projects\library\WEB-INF\database\library.hsqldb&quot;/&gt;" value="&lt;init-param url=&quot;jdbc:hsqldb:c:\${kit.resin-dir-name}\webapps\library\WEB-INF\database\library.hsqldb&quot;/&gt;" summary="yes"/>

		<replace file="${kit.samples.stage.dir}/cura/${sparx.home.replace.file.bat}" token="${sparx.home.replace.token.bat}" value="${sparx.home.replace.value.bat}" summary="yes"/>
		<replace file="${kit.samples.stage.dir}/cura/${sparx.home.replace.file.sh}" token="${sparx.home.replace.token.sh}" value="${sparx.home.replace.value.sh}" summary="yes"/>

		<!-- 
			Now we have the complete Sparx build and samples from CVS so build resin.
			1) Unzip the ZIP file and copy samples and create a eval.zip file.
			2) Delete the ZIP file contents unzipped in (1).
			3) Untar the tar.gz file and copy samples and create a eva.tar.gz file.
		-->
				
        <!-- remember, resin's zip file already has resin-x.y.z as the base dir -->
		<unzip src="${kit.dir}/resin-${kit.resin-version}.zip" dest="${kit.build.dir}/${kit.base-dir-name}"/>

        <copy todir="${kit.build.dir}/${kit.base-dir-name}/resin-${kit.resin-version}/webapps">
            <fileset dir="${kit.samples.stage.dir}"/>
        </copy>
		
        <delete file="${kit.full-name}.zip"/>
        <zip destfile="${kit.full-name}.zip">
            <zipfileset dir="${kit.build.dir}/${kit.base-dir-name}" prefix="${kit.base-dir-name}"/>
        </zip>
        
        <delete dir="${kit.build.dir}/${kit.base-dir-name}/resin-${kit.resin-version}"/>

		<untar src="${kit.dir}/resin-${kit.resin-version}.tar.gz" dest="${kit.build.dir}/${kit.base-dir-name}" compression="gzip"/>

        <copy todir="${kit.build.dir}/${kit.base-dir-name}/resin-${kit.resin-version}/webapps">
            <fileset dir="${kit.samples.stage.dir}"/>
        </copy>
		
        <delete file="${kit.full-name}.tar.gz"/>
        <tar destfile="${kit.full-name}.tar.gz" compression="gzip">
            <tarfileset dir="${kit.build.dir}/${kit.base-dir-name}" prefix="${kit.base-dir-name}"/>
        </tar>
    </target>

    <!-- ==================== Administrative targets  ======================= -->
    <target name="clean" depends="init">
        <delete dir="${build.dir}"/>
    </target>

    <target name="sparx" depends="init,compile,jar,javadoc,web-shared,clean"/>

    <!-- =============================== Help =============================== -->
    <target name="targets">
        <echo message=""/>
        <echo message="ANT build targets for Sparx"/>
        <echo message=""/>
        <echo message="The following targets are available:"/>
        <echo message="  sparx         Clean, compile and then create JAR"/>
        <echo message="  clean         Clean build and jar directories"/>
        <echo message="  jar           Create JAR"/>
        <echo message="  javadoc       Create JavaDoc for Classes"/>
        <echo message="  compile       Compile Sparx"/>
        <echo message="  web-shared    Create a ZIP file of the web-shared directory"/>
        <echo message="  kit-eval      Create a ZIP file of the Sparx Evaluation Kit with only binaries and no samples"/>
        <echo message="  kit-eval-full Create a ZIP file of the Sparx Evaluation Kit"/>
    </target>
</project>
