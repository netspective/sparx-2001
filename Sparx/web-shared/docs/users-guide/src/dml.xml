<chapter>
    <title>Manipulating Relational Data: Inserts, Updates, and Deletes </title>
    <section id="DML" xreflabel="Manipulating Relational Data">
        <title>Overview</title>
        <para>
        &framework-name; provides a JSP custom tag called <sgmltag class="starttag">xaf:dml</sgmltag>
        for database actions concerning inserts, updates and deletes. Unlike the static queries, there are no
        statement definitions in a XML file. The actual data modification statement is generated by &framework-name;
        and the user needs only to specify the action type and the columns to modify.
        The common usage of a data modification action is to bind it to a dialog submit action. This way when the
        dialog is submitted, the fields entered by the user is committed to the database. 
        The <sgmltag class="starttag">xaf:dml</sgmltag> custom tag has an attribute called 
        <sgmltag class="attribute">command</sgmltag> which specifies the data modification action type.
        </para>
        
        <para>
        For unique cases where using a custom tag is unsuitable, &framework-name; provides Java
        objects and methods which can be used to manipulate relational data. The &framework-name; class
        <sgmltag attribute="class">com.xaf.form.DialogContext</sgmltag> contains several methods for
        doing inserts, updates, and deletes.
        </para>
    </section>

    <section id="DML-CustomTag">
        <title>Using Custom Tag <sgmltag class="starttag">xaf:dml</sgmltag></title>
        <para> 
        As mentioned in the previous section, inserting, updating  and deleting data of a relational database
        can be carried out using two different methods made available by &framework-name;. For most cases, 
        using the custom tag <sgmltag class="starttag">xaf:dml</sgmltag> inside a JSP 
        will be the most suitable and convenient way. Only in unusual cases, using the Java methods defined
        in <sgmltag attribute="class">com.xaf.form.DialogContext</sgmltag> is recommended.     

        These are the attributes available for the <sgmltag class="starttag">xaf:dml</sgmltag> custom tag.
        <variablelist>            
            <varlistentry>
                <term> <sgmltag class="attribute">dataSource</sgmltag></term>                
                <listitem>
                    <para>
                    Specifies which data source to perform the action on (if it is not defined, the action will be performed
                    on the default data source defined in <filename class="conf">web-app/Site/WEB-INF/web.xml</filename>) 
                    </para>
                </listitem>
            </varlistentry>        
            <varlistentry>
                <term> <sgmltag class="attribute">command</sgmltag></term>                
                <listitem>
                    <para>
                    Specifies what type of SQL action to perform. The following values are available for this attribute:
                    <itemizedlist>
                        <listitem><sgmltag class="attvalue">insert-or-update</sgmltag></listitem>
                        <listitem><sgmltag class="attvalue">insert</sgmltag></listitem>
                        <listitem><sgmltag class="attvalue">update</sgmltag> </listitem>
                    </itemizedlist>                
                    The <sgmltag class="attvalue">insert-or-update</sgmltag>
                    will update existing data and if the data doesn't exist, it will automatically insert new data.                    
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term> <sgmltag class="attribute">table</sgmltag></term>                
                <listitem>
                    <para>
                    Specifies which database table to modify.
                    </para>
                </listitem>
            </varlistentry>        
            <varlistentry>
                <term> <sgmltag class="attribute">fields</sgmltag></term>                
                <listitem>
                    <para>
                    Specifies which dialog fields are written to which database table columns. 
                    The syntax for the value of this attribute is 
                    <emphasis><quote>dialog-field-id=database-column-name</quote></emphasis>
                    (seperated by commas for multiple columns). If the dialog's field id is the same 
                    as the database column name, then only the <emphasis>"database-column-name"</emphasis>
                    suffices as shown in the example above. 
                    </para>
                </listitem>
            </varlistentry>              
            <varlistentry>
                <term> <sgmltag class="attribute">columns</sgmltag></term>                
                <listitem>
                    <para>
                    Specifies actual database column name and what value to write for that column. 
                    (These values are not obtained from a dialog)
                    The syntax for the value of this attribute is 
                    <emphasis><quote>database-column-name=value</quote></emphasis>
                    (seperated by commas for multiple columns). The value can be a value source such as
                    session attributes and request parameters. If one wishes to literally specify a 
                    value for the database column, then the value source <emphasis>custom-sql</emphasis> can be used.
                    </para>
                </listitem>
            </varlistentry>                           
            <varlistentry>
                <term> <sgmltag class="attribute">where</sgmltag></term>                
                <listitem>
                    <para>
                    Specifies the condition criteria (the SQL WHERE clause) used for updates. 
                    The value for this attribute is totally dependent
                    upon the developer. It accepts a string to append after the <emphasis>where</emphasis>
                    SQL keyword. The example above retrieves the string from a Java variable.
                    </para>
                </listitem>
            </varlistentry>             
            <varlistentry>
                <term> <sgmltag class="attribute">debug</sgmltag></term>                
                <listitem>
                    <para>
                    Specifies the whether or not to exeucte the SQL action or not. If the value is set to
                    <quote>yes</quote>, then the generated DML SQL is displayed with the respective 
                    input parameters instead of executing the SQL.
                    </para>
                </listitem>
            </varlistentry>                 
        </variablelist>        
        </para>

        <section id="DML-CustomTag-Examples">
        <title>Examples</title>        
            <section> 
                <title>Update Action</title>
                <example id="DML-CustomTag-Examples-Update">
                    <title>Update using custom tag</title>
                    The following is an example of a <emphasis>update</emphasis> action DML which
                    accepts the input data from a dialog:
                    <programlisting>
                    <![CDATA[        
    <xaf:dialog name="test.demographics">
        <%
        String whereStr = "lastName = 'Smith'";
        %>
        <xaf:dml dataSource="session:myDataSource"
                command="update"
                table="demographics"
                fields="address,city,state,zipcode"
                columns="cdate=custom-sql:sysdate"
                where="<%= whereStr %>"
                debug="no" />
    </xaf:dialog>            
                    ]]>
                    </programlisting>
                </example>        
            </section>

            <section> 
                <title>Insert Action</title>
                <example id="DML-CustomTag-Examples-Insert">
                    <title>Insert using custom tag</title>
                    The following is an example of a <emphasis>insert</emphasis> action DML which
                    accepts the input data from a dialog:
                    <programlisting>
                    <![CDATA[        
    <xaf:dialog name="test.demographics">
        <xaf:dml dataSource="session:myDataSource"
                command="insert"
                table="demographics"
                fields="address,city,state,zipcode"
                columns="cdate=custom-sql:sysdate"
                debug="no" />
    </xaf:dialog>            
                    ]]>
                    </programlisting>
                </example>        
            </section>

            <section> 
                <title>Delete Action</title>
                <example id="DML-CustomTag-Examples-Delete">
                    <title>Delete using custom tag</title>
                    <para>
                    The following is an example of a <emphasis>delete</emphasis> action DML which
                    accepts the input data from a dialog:
                    <programlisting>
                    <![CDATA[      
    <xaf:dialog name="test.demographics">
        <%
        String whereStr = "lastName = 'Smith'";
        %>                    
        <xaf:dml dataSource="session:myDataSource"
                command="remove"
                table="demographics"
                where="<%= whereStr %>"
                debug="no" />
    </xaf:dialog>            
                    ]]>
                    </programlisting>
                    There is no need to specify the <sgmltag class="attribute">fields</sgmltag> attribute for delete actions.
                    </para>
                </example>        
            </section>            
        </section>     
    </section>

    <section id="DML-JavaClass">
        <title>Using Java Class</title>
        <para> 
            The <sgmltag attribute="class">com.xaf.form.DialogContext</sgmltag> class contains several
            methods to execute insert and update actions. Since the <sgmltag attribute="class">DialogContext</sgmltag>
            class contains these methods, a dialog object is necessary to reference the dialog context object.
            By default, a dialog context object exists inside a JSP if a dialog object also exists in it. One can reference 
            directly to it inside a JSP by using the variable name <varname>dialogContext</varname>. For cases when
            the dialog context needs to be referenced outside of a JSP, a <classname>Dialog</classname> object 
            is needed:
            <programlisting>
            <![CDATA[
DialogContext dc = loginDialog.createContext(servletContext, this, req, resp, SkinFactory.getDialogSkin());            
            ]]>
            </programlisting>        
        </para>
        <section id="DML-JavaClass-Examples">
            <title>Examples</title>            
            <section>
                <title> Update Action</title>
                <para>
                <example id="DML-JavaClass-Examples-Update">
                    <title>Update Action using Java code</title>
                    <para>
                    The following is an example of using <methodname>executeSqlUpdate</methodname> method to execute
                    an insert action:
                    <programlisting>
                    <![CDATA[
    dialogContext.executeSqlUpdate(dataSourceId, tableName, fields, columns, whereCond)
                    ]]>
                    </programlisting>
                    If the default data source is to be used, the following method is available:
                    <programlisting>
                    <![CDATA[
    dialogContext.executeSqlUpdate(tableName, fields, columns, whereCond)
                    ]]>
                    </programlisting>                    
                    The method variables <varname>fields</varname> and <varname>columns</varname> are strings
                    containing comma seperated column/value pairs. This example is the Java version of the custom
                    tag example shown in <xref linkend="DML-CustomTag-Examples-Update"/>.
                    </para>
                </example>
                </para>
            </section>
            <section>
                <title> Insert Action</title>
                <para>
                <example id="DML-JavaClass-Examples-Update">
                    <title>Update Action using Java code</title>
                    <para>
                    The following is an example of using <methodname>executeSqlInsert</methodname> method to execute
                    an insert action:
                    <programlisting>
                    <![CDATA[
    dialogContext.executeSqlInsert(dataSourceId, tableName, fields, columns)
                    ]]>
                    </programlisting>
                    If the default data source is to be used, the following method is available:
                    <programlisting>
                    <![CDATA[
    dialogContext.executeSqlInsert(tableName, fields, columns)
                    ]]>
                    </programlisting>                       
                    The method variables <varname>fields</varname> and <varname>columns</varname> are strings
                    containing comma seperated column/value pairs. This example is the Java version of the custom
                    tag example shown in <xref linkend="DML-CustomTag-Examples-Insert"/>
                    </para>
                </example>
                </para>
            </section>            
            <section>
                <title> Delete Action</title>
                <para>
                <example id="DML-JavaClass-Examples-Delete">
                    <title>Delete Action using Java code</title>
                    <para>
                    The following is an example of using <methodname>executeSqlRemove</methodname> method to execute
                    an insert action:
                    <programlisting>
                    <![CDATA[
    dialogContext.executeSqlRemove(dataSourceId, tableName, fields, columns, whereCond)
                    ]]>
                    </programlisting>
                    If the default data source is to be used, the following method is available:
                    <programlisting>
                    <![CDATA[
    dialogContext.executeSqlRemove(tableName, fields, columns, whereCond)
                    ]]>
                    </programlisting>                       
                    The method variables <varname>fields</varname> and <varname>columns</varname> are strings
                    containing comma seperated column/value pairs. This example is the Java version of the custom
                    tag example shown in <xref linkend="DML-CustomTag-Examples-Delete"/>
                    </para>
                </example>
                </para>
            </section>                       
        </section>        
    </section>
    
    <section>
        <title>Transactions</title>
        <para>
        &framework-name; provides a JSP custom tag called <sgmltag class="starttag">xaf:transaction</sgmltag>
        for defining database transactions. Any DML custom tags within the start and end custom tags for
        the transaction will belong to a transaction. They share the same database connection and if there
        are any errors, all actions will be rolled back. For example:
        <programlisting>       
    <![CDATA[        
    <xaf:tranaction>
        <xaf:query name="Test.TestQuery" report="none" store="single-column" 
            storeType="request-attr:lastName" debug="no"/>
        <%
        String whereStr = "lastName = '"+ (String)request.getAttribute("lastName") + "'";
        %>      
        <xaf:dml dataSource="session:myDataSource"
                command="remove"
                table="user"                
                where="<%= whereStr %>"
                debug="no" />        
        <xaf:dml dataSource="session:myDataSource"
                command="remove"
                table="demographics"                
                where="<%= whereStr %>"
                debug="no" />
                
    </xaf:transaction>
    ]]>         
        </programlisting>
        The above example retrieves a last name using a defined query and then removes data from two 
        tables, <emphasis>user</emphasis> and <emphasis>demographics</emphasis>, using the last name
        as a selection criteria. All three actions are within a transaction and if any one had failed
        during the transaction, all actions would have been rolled back.
        </para>
        
        <para>
        &framework-name; provides <methodname>beginSqlTransaction</methodname> and 
        <methodname>endSqlTransaction</methodname> methods within the
        <sgmltag attribute="class">com.xaf.form.DialogContext</sgmltag> class for creating
        transactions when using the Java classes for SQL insert, updates, and deletes.
        The following is an example of using the transaction methods:
        <programlisting>
        <![CDATA[
    dialogContext.beginTransaction();
    dialogContext.executeSqlInsert(tableName, fields, columns);
    dialogContext.executeSqlRemove(tableName, fields, columns, whereCond);
    dialogContext.endTransaction();
        ]]>
        </programlisting>
        </para>
    </section>    
</chapter>