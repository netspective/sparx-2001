<?xml version="1.0"?>

<schema name="generic-datatypes">

	<datatype name="text">
		<java-class package="java.lang">String</java-class>
		<sqldefn dbms="ansi">varchar(${size})</sqldefn>
		<sqldefn dbms="mssql">varchar(${size})</sqldefn>
		<size>32</size>

		<validate type="max-length" length="getSize()"/>

		<field.text size="20"/>
	</datatype>

	<datatype name="char">
		<java-class package="java.lang">String</java-class>
		<sqldefn dbms="ansi">varchar(1)</sqldefn>

		<field.text size="1" max-length="1"/>
	</datatype>

	<datatype name="float">
		<java-type default="0.0">float</java-type>
		<java-class package="java.lang">Float</java-class>
		<sqldefn dbms="ansi">float</sqldefn>
		<sqldefn dbms="oracle">number(20,6)</sqldefn>

		<field.float size="16" min="0.0"/>
	</datatype>

	<datatype name="integer">
		<java-type default="0">int</java-type>
		<java-class package="java.lang">Integer</java-class>
		<sqldefn dbms="ansi">integer</sqldefn>
		<sqldefn dbms="oracle">number(8)</sqldefn>

		<field.integer size="16" min="0" max="99999999"/>
	</datatype>

	<datatype name="small-int">
		<java-type default="0">int</java-type>
		<java-class package="java.lang">Integer</java-class>
		<sqldefn dbms="ansi">smallint</sqldefn>
		<sqldefn dbms="oracle">number(4)</sqldefn>

		<field.integer size="16" min="0" max="9999"/>
	</datatype>

	<datatype name="long-integer">
		<java-type default="0">long</java-type>
		<java-class package="java.lang">Long</java-class>
		<sqldefn dbms="ansi">integer</sqldefn>
		<sqldefn dbms="oracle">number(16)</sqldefn>

		<field.integer size="16" min="0"/>
	</datatype>

	<datatype name="boolean">
		<java-type default="false">boolean</java-type>
		<java-class package="java.lang">Boolean</java-class>
		<sqldefn dbms="ansi">boolean</sqldefn>
		<sqldefn dbms="oracle">number(1)</sqldefn>
		<sqldefn dbms="mssql">bit</sqldefn>
		<sqldefn dbms="hsqldb">bit</sqldefn>

		<field.boolean size="16" style="radio"/>
	</datatype>

	<datatype name="currency">
		<java-type default="0.0">float</java-type>
		<java-class package="java.lang">Float</java-class>
		<sqldefn dbms="ansi">currency</sqldefn>
		<sqldefn dbms="oracle">number(12,2)</sqldefn>
		<sqldefn dbms="mssql">money</sqldefn>
		<sqldefn dbms="postgres">numeric(12,2)</sqldefn>

		<field.currency size="16"/>
	</datatype>

	<datatype name="percentage">
		<java-type default="0.0">float</java-type>
		<java-class package="java.lang">Float</java-class>
		<sqldefn dbms="ansi">float</sqldefn>
		<sqldefn dbms="oracle">number(5,2)</sqldefn>

		<validate type="max-length" length="100"/>
		<validate type="min-value" value="new Float(0.0)"/>
		<validate type="max-value" value="new Float(100.0)"/>
		<!-- validate type="min-length" length="20"/ -->

		<field.float size="16" min="0.0" max="100.0"/>
	</datatype>

	<datatype name="lookup">
		<java-type default="0">int</java-type>
		<java-class package="java.lang">Integer</java-class>
		<sqldefn dbms="ansi">integer</sqldefn>
		<sqldefn dbms="oracle">number(8)</sqldefn>

		<field.select/>
	</datatype>

	<datatype name="date">
		<java-class package="java.util">Date</java-class>
		<java-date-format-instance>java.text.DateFormat.getDateInstance()</java-date-format-instance>
		<java-default>new java.util.Date()</java-default>
		<sqldefn dbms="ansi">date</sqldefn>
		<sqldefn dbms="mssql">datetime</sqldefn>

		<field.date size="16" format="MM-dd-yyyy" min="01-01-1900"/>
	</datatype>

	<datatype name="stamp">
		<java-class package="java.util">Date</java-class>
		<java-timestamp-class>java.sql.Timestamp</java-timestamp-class>
		<java-date-format-instance>java.text.DateFormat.getDateTimeInstance()</java-date-format-instance>
		<java-default>new java.util.Date()</java-default>
		<sqldefn dbms="ansi">date</sqldefn>
		<sqldefn dbms="mssql">datetime</sqldefn>
		<sqldefn dbms="postgres">timestamp</sqldefn>
		<sqldefn dbms="oracle">timestamp</sqldefn>

		<field.datetime size="16" format="MM-dd-yyyy H:mm" min="01-01-1900 00:00"/>
	</datatype>

	<datatype name="time">
		<java-class package="java.util">Date</java-class>
		<java-date-format-instance>java.text.DateFormat.getTimeInstance()</java-date-format-instance>
		<java-default>new java.util.Date()</java-default>
		<sqldefn dbms="ansi">date</sqldefn>
		<sqldefn dbms="mssql">datetime</sqldefn>

		<field.time size="16" format="H:mm" min="00:00"/>
	</datatype>

	<datatype name="auto-inc" type="long-integer">
		<copytype>long-integer</copytype>
		<sqldefn dbms="mssql">integer IDENTITY</sqldefn>
		<sqldefn dbms="hsqldb">integer IDENTITY</sqldefn>
		<generate-id>autoinc</generate-id>

		<trigger type="dal-row-java" time="before" event="insert" use-db-policy="yes" use-dbms-id="yes" use-table-instance="yes">
			if (databasePolicy.retainAutoIncColInDml())
			{
				Column ${column.getAttribute("_gen-member-name")}Col = table.get${column.getAttribute("_gen-method-name")}Column();
				Object value = databasePolicy.handleAutoIncPreDmlExecute(cc.getConnection(), ${column.getAttribute("_gen-member-name")}Col.getSequenceName(), COLNAME_${column.getAttribute("_gen-constant-name")});
				dml.updateValue(COLAI_${column.getAttribute("_gen-constant-name")}, dbmsId, value);
				set${column.getAttribute("_gen-method-name")}(value instanceof ${column.getAttribute("_gen-java-class-spec")} ? (${column.getAttribute("_gen-java-class-spec")}) value : new ${column.getAttribute("_gen-java-class-spec")}(value.toString()));
			}
			else
			{
				dml.removeColumn(COLNAME_${column.getAttribute("_gen-constant-name")});
				dml.createSql(dbmsId);
			}
		</trigger>

		<trigger type="dal-row-java" time="after" event="insert" use-db-policy="yes" use-table-instance="yes">
			{
				Column ${column.getAttribute("_gen-member-name")}Col = table.get${column.getAttribute("_gen-method-name")}Column();
				String seqOrTableName = databasePolicy.retainAutoIncColInDml() ? ${column.getAttribute("_gen-member-name")}Col.getSequenceName() : table.getName();
				Object value = databasePolicy.handleAutoIncPostDmlExecute(cc.getConnection(), seqOrTableName, ${column.getAttribute("_gen-member-name")}Col.getName(), get${column.getAttribute("_gen-method-name")}());
				set${column.getAttribute("_gen-method-name")}(value instanceof ${column.getAttribute("_gen-java-class-spec")} ? (${column.getAttribute("_gen-java-class-spec")}) value : new ${column.getAttribute("_gen-java-class-spec")}(value.toString()));
			}
		</trigger>

		<trigger type="dal-row-java" time="before" event="update" use-db-policy="yes" use-dbms-id="yes">
			if (!databasePolicy.retainAutoIncColInDml())
			{
				dml.removeColumn(COLNAME_${column.getAttribute("_gen-constant-name")});
				dml.createSql(dbmsId);
			}
		</trigger>

		<field.integer size="16" min="0"/>
	</datatype>

	<datatype name="data-block">
		<java-class package="java.lang">Object</java-class>
		<sqldefn dbms="oracle">clob</sqldefn>
		<sqldefn dbms="mssql">text</sqldefn>
		<sqldefn dbms="hsqldb">object</sqldefn>
		<sqldefn dbms="postgres">bytea</sqldefn>
	</datatype>

	<datatype name="email" type="text">
		<size>64</size>

		<validate type="email-format"/>

		<field.email size="20"/>
	</datatype>

	<datatype name="guid-text">
		<java-class package="java.lang">String</java-class>
		<sqldefn dbms="ansi">varchar(${size})</sqldefn>
		<sqldefn dbms="mssql">varchar(${size})</sqldefn>
		<size>36</size>

		<validate type="guid32-format"/>

		<field.guid32>
			<conditional action="apply-flag" flag="hidden" data-cmd="add"/>
		</field.guid32>
	</datatype>

	<datatype name="guid32" type="guid-text">
		<copytype>guid-text</copytype>
		<generate-id>guid32</generate-id>

		<validate name="guid32-format-update" type="guid32-format" event="update"/>
		<validate name="guid32-format-delete" type="guid32-format" event="delete"/>

		<field.guid32/>

		<trigger type="dal-row-java" time="before" event="insert" use-db-policy="yes" use-dbms-id="yes" use-table-instance="yes">
			if (databasePolicy.retainGUIDColInDml())
			{
				Object value = databasePolicy.handleGUIDPreDmlExecute(cc.getConnection(), table.getName(), COLNAME_${column.getAttribute("_gen-constant-name")});
				dml.updateValue(COLAI_${column.getAttribute("_gen-constant-name")}, dbmsId, value);
				set${column.getAttribute("_gen-method-name")}(value instanceof ${column.getAttribute("_gen-java-class-spec")} ? (${column.getAttribute("_gen-java-class-spec")}) value : new ${column.getAttribute("_gen-java-class-spec")}(value.toString()));
			}
			else
			{
				dml.removeColumn(COLNAME_${column.getAttribute("_gen-constant-name")});
				dml.createSql(dbmsId);
			}
		</trigger>

		<trigger type="dal-row-java" time="after" event="insert" use-db-policy="yes" use-table-instance="yes">
			{
				Column ${column.getAttribute("_gen-member-name")}Col = table.get${column.getAttribute("_gen-method-name")}Column();
				String seqOrTableName = databasePolicy.retainAutoIncColInDml() ? ${column.getAttribute("_gen-member-name")}Col.getSequenceName() : table.getName();
				Object value = databasePolicy.handleGUIDPostDmlExecute(cc.getConnection(), seqOrTableName, ${column.getAttribute("_gen-member-name")}Col.getName(), get${column.getAttribute("_gen-method-name")}());
				set${column.getAttribute("_gen-method-name")}(value instanceof ${column.getAttribute("_gen-java-class-spec")} ? (${column.getAttribute("_gen-java-class-spec")}) value : new ${column.getAttribute("_gen-java-class-spec")}(value.toString()));
			}
		</trigger>

		<trigger type="dal-row-java" time="before" event="update" use-db-policy="yes" use-dbms-id="yes">
			if (!databasePolicy.retainGUIDColInDml())
			{
				dml.removeColumn(COLNAME_${column.getAttribute("_gen-constant-name")});
				dml.createSql(dbmsId);
			}
		</trigger>
	</datatype>

	<datatype name="duration">
		<composite>
			<column name="${column.getAttribute(&quot;name&quot;)}_begin_date" type="date" descr="${column.getAttribute(&quot;name&quot;)} beginning date"/>
			<column name="${column.getAttribute(&quot;name&quot;)}_end_date" type="date" descr="${column.getAttribute(&quot;name&quot;)} ending date"/>
		</composite>
	</datatype>

	<datatype name="stamp-range">
		<composite>
			<column name="${column.getAttribute(&quot;name&quot;)}_begin_stamp" type="stamp"/>
			<column name="${column.getAttribute(&quot;name&quot;)}_end_stamp" type="stamp"/>
		</composite>
	</datatype>
	
	<datatype name="lookup-with-freeform">
		<composite>
			<column name="${column.getAttribute(&quot;name&quot;)}_id" lookupref="${column.getAttribute(&quot;enumeration-table&quot;)}" caption="${column.getAttribute(&quot;caption&quot;)}" descr="${column.getAttribute(&quot;descr&quot;)}">
				<field.select caption="${this.getParentNode().getAttribute(&quot;caption&quot;)}"/>
			</column>
			<column name="${column.getAttribute(&quot;name&quot;)}" type="text" size="${column.getAttribute(&quot;size&quot;)}" caption="${column.getAttribute(&quot;caption&quot;)}" descr="${column.getAttribute(&quot;descr&quot;)} (if 'Other' chosen above)">
				<field.text caption="Other ${this.getParentNode().getAttribute(&quot;caption&quot;)}" size="16">
					<conditional action="display" partner="${this.getParentNode().getAttribute(&quot;name&quot;)}_id" js-expr="control.options[control.selectedIndex].text == 'Other'"/>
				</field.text>
			</column>
		</composite>
	</datatype>

	<datatype name="text-set">
		<java-class package="java.lang">String</java-class>
		<sqldefn dbms="ansi">varchar(${size})</sqldefn>
		<sqldefn dbms="mssql">varchar(${size})</sqldefn>
		<size>255</size>

		<validate type="max-length" length="getSize()"/>

		<field.text size="20"/>

		<table name="${parentColTable.getAttribute('abbrev')}_${parentColumn.getAttribute('name')}_Set" abbrev="${parentColTable.getAttribute('abbrev')}${parentColumn.getAttribute('abbrev')}St">
			<column name="system_id" type="auto-inc" primarykey="yes" abbrev="sysid" descr="Unique record identifier"/>
			<column name="parent_id" parentref="${this.getParentNode().getAttribute('_gen-parent-column-table-pri-key-ref')}" descr="The parent of this record"/>
			<column name="value_index" type="integer" descr="The ordinal value (index) of the text or null if not important"/>
			<column name="value_text" type="text" size="32" descr="The actual text value"/>
		</table>

		<trigger type="dal-row-java" time="after" event="insert">
			{
				java.util.StringTokenizer st = new java.util.StringTokenizer(get${column.getAttribute("_gen-method-name")}(), ",");
				int itemIndex = 0;
				while(st.hasMoreTokens())
				{
					String textItem = st.nextToken().trim();
					${column.getElementsByTagName("generated-child-table").item(0).getAttribute("_gen-row-class-name")} row = create${column.getElementsByTagName("generated-child-table").item(0).getAttribute("_gen-row-name")}();
					row.setValueIndex(itemIndex);
					row.setValueText(textItem);
					row.getTable().insert(cc, row);
					itemIndex++;
				}
			}
		</trigger>

		<trigger type="dal-row-java" time="after" event="update">
			{
				delete${column.getElementsByTagName("generated-child-table").item(0).getAttribute("_gen-rows-name")}(cc);
				java.util.StringTokenizer st = new java.util.StringTokenizer(get${column.getAttribute("_gen-method-name")}(), ",");
				int itemIndex = 0;
				while(st.hasMoreTokens())
				{
					String textItem = st.nextToken().trim();
					${column.getElementsByTagName("generated-child-table").item(0).getAttribute("_gen-row-class-name")} row = create${column.getElementsByTagName("generated-child-table").item(0).getAttribute("_gen-row-name")}();
					row.setValueIndex(itemIndex);
					row.setValueText(textItem);
					row.getTable().insert(cc, row);
					itemIndex++;
				}
			}
		</trigger>

		<trigger type="dal-row-java" time="after" event="delete">
			delete${column.getElementsByTagName("generated-child-table").item(0).getAttribute("_gen-rows-name")}(cc);
		</trigger>
	</datatype>

	<datatype name="enum-set">
		<java-class package="java.lang">String</java-class>
		<sqldefn dbms="ansi">varchar(${size})</sqldefn>
		<sqldefn dbms="mssql">varchar(${size})</sqldefn>
		<size>255</size>

		<validate type="max-length" length="getSize()"/>

		<field.text size="20"/>

		<table name="${parentColTable.getAttribute('abbrev')}_${parentColumn.getAttribute('name')}_Set" abbrev="${parentColTable.getAttribute('abbrev')}${parentColumn.getAttribute('abbrev')}St">
			<column name="system_id" type="auto-inc" primarykey="yes" abbrev="sysid" descr="Unique record identifier"/>
			<column name="parent_id" parentref="${this.getParentNode().getAttribute('_gen-parent-column-table-pri-key-ref')}" descr="The parent of this record"/>
			<column name="enum_index" type="integer" descr="The ordinal value (index) of the enumeration or null if not important"/>
			<column name="enum_value" lookupref="${this.getParentNode().getParentNode().getAttribute('enumeration-table')}" descr="The value of the enumeration item"/>
		</table>

		<trigger type="dal-row-java" time="after" event="insert">
			{
				java.util.StringTokenizer st = new java.util.StringTokenizer(get${column.getAttribute("_gen-method-name")}(), ",");
				int itemIndex = 0;
				while(st.hasMoreTokens())
				{
					String enumCaption = st.nextToken().trim();
					Integer enumValue = ${column.getAttribute('_gen-enumeration-table-item-class')}.parseItem(enumCaption).getIdAsInteger();

					${column.getElementsByTagName("generated-child-table").item(0).getAttribute("_gen-row-class-name")} row = create${column.getElementsByTagName("generated-child-table").item(0).getAttribute("_gen-row-name")}();
					row.setEnumIndex(itemIndex);
					row.setEnumValue(enumValue);
					row.getTable().insert(cc, row);
					itemIndex++;
				}
			}
		</trigger>

		<trigger type="dal-row-java" time="after" event="update">
			{
				delete${column.getElementsByTagName("generated-child-table").item(0).getAttribute("_gen-rows-name")}(cc);
				java.util.StringTokenizer st = new java.util.StringTokenizer(get${column.getAttribute("_gen-method-name")}(), ",");
				int itemIndex = 0;
				while(st.hasMoreTokens())
				{
					String enumCaption = st.nextToken().trim();
					Integer enumValue = ${column.getAttribute('_gen-enumeration-table-item-class')}.parseItem(enumCaption).getIdAsInteger();

					${column.getElementsByTagName("generated-child-table").item(0).getAttribute("_gen-row-class-name")} row = create${column.getElementsByTagName("generated-child-table").item(0).getAttribute("_gen-row-name")}();
					row.setEnumIndex(itemIndex);
					row.setEnumValue(enumValue);
					row.getTable().insert(cc, row);
					itemIndex++;
				}
			}
		</trigger>

		<trigger type="dal-row-java" time="after" event="delete">
			delete${column.getElementsByTagName("generated-child-table").item(0).getAttribute("_gen-rows-name")}(cc);
		</trigger>
	</datatype>

    <!-- ***********************************************************************************************************
               Validation rules
         *********************************************************************************************************** -->

	<validation-rule name="default">
		<message-success>${rule.getAttribute("name")} valid</message-success>
		<message-failure>${rule.getAttribute("name")} invalid</message-failure>

		<declare-java-code indent="    ">
			private static String RULENAME_${rule.getAttribute("_gen-constant-name")} = "${rule.getAttribute("name")}";
			private static String RULEMSGVALID_${rule.getAttribute("_gen-constant-name")} = "${rule.getElementsByTagName("message-success").item(0).getFirstChild().getNodeValue()}";
			private static String RULEMSGFAIL_${rule.getAttribute("_gen-constant-name")} = "${rule.getElementsByTagName("message-failure").item(0).getFirstChild().getNodeValue()}";
		</declare-java-code>
	</validation-rule>

	<validation-rule name="perl5-regular-expression" type="default">
		<import-java-code indent="">
			import org.apache.oro.text.regex.MalformedPatternException;
			import org.apache.oro.text.regex.Pattern;
			import org.apache.oro.text.regex.PatternCompiler;
			import org.apache.oro.text.regex.PatternMatcher;
			import org.apache.oro.text.regex.Perl5Compiler;
			import org.apache.oro.text.regex.Perl5Matcher;
		</import-java-code>
		<declare-java-code type="singleton" ID="perl5-regular-expression" indent="    ">
			private static PatternCompiler patternCompiler = new Perl5Compiler();
			private static PatternMatcher patternMatcher = new Perl5Matcher();
		</declare-java-code>
		<declare-java-code indent="    ">
			private static String REGEXPATTERN_${rule.getAttribute("_gen-constant-name")} = "${rule.getElementsByTagName("reg-ex-pattern").item(0).getFirstChild().getNodeValue()}";
			private static Pattern ${rule.getAttribute("_gen-member-name")}Pattern;
		</declare-java-code>
		<static-java-code indent="        ">
			try
			{
				${rule.getAttribute("_gen-member-name")}Pattern = patternCompiler.compile(REGEXPATTERN_${rule.getAttribute("_gen-constant-name")});
			}
			catch(MalformedPatternException ${rule.getAttribute("_gen-member-name")}Exception)
			{
				${rule.getAttribute("_gen-member-name")}Pattern = null;
			}
		</static-java-code>
		<java-code indent="        ">
			if(value != null &amp;&amp; ${rule.getAttribute("_gen-member-name")}Pattern != null)
			{
				boolean valid = patternMatcher.matches(value, ${rule.getAttribute("_gen-member-name")}Pattern);
				bdvResult.addResultInfo(RULENAME_${rule.getAttribute("_gen-constant-name")}, valid, valid ? RULEMSGVALID_${rule.getAttribute("_gen-constant-name")} : RULEMSGFAIL_${rule.getAttribute("_gen-constant-name")});
			}
			else
				bdvResult.addResultInfo(RULENAME_${rule.getAttribute("_gen-constant-name")}, false, "Reg ex pattern '"+ REGEXPATTERN_${rule.getAttribute("_gen-constant-name")} +"' is invalid.");
		</java-code>
	</validation-rule>

	<validation-rule name="guid32-format" type="perl5-regular-expression">
		<reg-ex-pattern>^[A-Z0-9]{8}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{12}$</reg-ex-pattern>
		<message-failure>Please ensure that this field contains a valid GUID32.&lt;br&gt;The format of a GUID32 is xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;br&gt;where x is an uppercase letter or digit.</message-failure>
	</validation-rule>

	<validation-rule name="email-format" type="perl5-regular-expression">
		<reg-ex-pattern>^\\w+((-\\w+)|(\\.\\w+))*\\@[A-Za-z0-9]+((\\.|-)[A-Za-z0-9]+)*\\.[A-Za-z0-9]+$</reg-ex-pattern>
		<message-failure>Please ensure that this field contains a valid email address.&lt;br&gt;Acceptable email address formats can have any digits or letters of the alphabet and must have an @ in the middle.</message-failure>
	</validation-rule>

	<validation-rule name="min-length" type="default">
		<java-code indent="        ">
		if(value != null)
		{
			boolean valid = value.toString().length() &gt; ${rule.getAttribute("length")};
			bdvResult.addResultInfo(RULENAME_${rule.getAttribute("_gen-constant-name")}, valid, valid ? RULEMSGVALID_${rule.getAttribute("_gen-constant-name")} : ("Length of '"+ value +"' is less than " + ${rule.getAttribute("length")}));
		}
		</java-code>
	</validation-rule>

	<validation-rule name="max-length" type="default">
		<java-code indent="        ">
		if(value != null)
		{
			boolean valid = value.toString().length() &lt; ${rule.getAttribute("length")};
			bdvResult.addResultInfo(RULENAME_${rule.getAttribute("_gen-constant-name")}, valid, valid ? RULEMSGVALID_${rule.getAttribute("_gen-constant-name")} : ("Length of '"+ value +"' is greater than " + ${rule.getAttribute("length")}));
		}
		</java-code>
	</validation-rule>

	<validation-rule name="min-value" type="default">
		<java-code indent="        ">
		if(value != null &amp;&amp; value instanceof Comparable)
		{
			boolean valid = value.compareTo(${rule.getAttribute("value")}) &gt; 0;
			bdvResult.addResultInfo(RULENAME_${rule.getAttribute("_gen-constant-name")}, valid, valid ? RULEMSGVALID_${rule.getAttribute("_gen-constant-name")} : (value.toString() + " is less than " + ${rule.getAttribute("value")}));
		}
		</java-code>
	</validation-rule>

	<validation-rule name="max-value" type="default">
		<java-code indent="        ">
		if(value != null &amp;&amp; value instanceof Comparable)
		{
			boolean valid = value.compareTo(${rule.getAttribute("value")}) &lt; 0;
			bdvResult.addResultInfo(RULENAME_${rule.getAttribute("_gen-constant-name")}, valid, valid ? RULEMSGVALID_${rule.getAttribute("_gen-constant-name")} : (value.toString() + " is greater than " + ${rule.getAttribute("value")}));
		}
		</java-code>
	</validation-rule>

</schema>
