<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XML Spy v4.2 U (http://www.xmlspy.com) by Shahid N. Shah (ISL Software Corporation) -->
<!--W3C Schema generated by XML Spy v4.2 U (http://www.xmlspy.com)-->
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified">
	<xsd:complexType name="columnType">
		<xsd:sequence>
			<xsd:element name="table" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Specifies a child table that will be created for this column.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="sqldefn" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Specifies what SQL will be generated for a specific database when this column's DDL is generated.</xsd:documentation>
				</xsd:annotation>
				<xsd:complexType>
					<xsd:simpleContent>
						<xsd:extension base="xsd:string">
							<xsd:attribute name="dbms" type="xsd:string" use="required" default="ansi">
								<xsd:annotation>
									<xsd:documentation>The ID of the database for which the sqldefn is being created.</xsd:documentation>
								</xsd:annotation>
							</xsd:attribute>
						</xsd:extension>
					</xsd:simpleContent>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="size" type="xsd:string" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>The size of the text field (if this datatype is a text datatype). The value of this field is replaced in the sqldefn element using the %size% macro.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="default" type="xsd:string" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Specifies the SQL expression  that will be used as the column's default value in the SQL create table statement.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="java-type" type="xsd:string" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Specifies a valid Java primitive type that will hold the value of this column (used by the DAL).</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="java-class" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Specifies a valid Java class that will hold the value of this column (used by the DAL).</xsd:documentation>
				</xsd:annotation>
				<xsd:complexType>
					<xsd:simpleContent>
						<xsd:extension base="xsd:string">
							<xsd:attribute name="package" type="xsd:string" use="required">
								<xsd:annotation>
									<xsd:documentation>Specifies the package in which the Java class may be found.</xsd:documentation>
								</xsd:annotation>
							</xsd:attribute>
						</xsd:extension>
					</xsd:simpleContent>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="java-date-format-instance" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Specifies a valid Java expression that will return a java.text.Format object suitable for formatting this column/datatype as a date</xsd:documentation>
				</xsd:annotation>
				<xsd:complexType>
					<xsd:simpleContent>
						<xsd:extension base="xsd:string"/>
					</xsd:simpleContent>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="description" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Specifies usage information for the column.</xsd:documentation>
				</xsd:annotation>
				<xsd:complexType>
					<xsd:simpleContent>
						<xsd:extension base="xsd:string">
							<xsd:attribute name="dbms" type="xsd:string" use="optional" default="ansi">
								<xsd:annotation>
									<xsd:documentation>The ID of the database for which the sqldefn is being created.</xsd:documentation>
								</xsd:annotation>
							</xsd:attribute>
						</xsd:extension>
					</xsd:simpleContent>
				</xsd:complexType>
			</xsd:element>
		</xsd:sequence>
		<xsd:attributeGroup ref="columnType"/>
	</xsd:complexType>
	<xsd:complexType name="dbmscustomType">
		<xsd:sequence maxOccurs="unbounded">
			<xsd:element name="oracle">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="ctldatatype" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="enumType">
		<xsd:simpleContent>
			<xsd:extension base="xsd:string">
				<xsd:attribute name="id" type="xsd:string"/>
				<xsd:attribute name="abbrev" type="xsd:string"/>
				<xsd:attribute name="java-constant" type="java-identifier"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
	<xsd:complexType name="indexType">
		<xsd:sequence>
			<xsd:element name="description" minOccurs="0">
				<xsd:complexType>
					<xsd:simpleContent>
						<xsd:extension base="xsd:string">
							<xsd:attribute name="dbms" type="xsd:string" use="optional" default="ansi">
								<xsd:annotation>
									<xsd:documentation>The ID of the database for which the sqldefn is being created.</xsd:documentation>
								</xsd:annotation>
							</xsd:attribute>
						</xsd:extension>
					</xsd:simpleContent>
				</xsd:complexType>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="name" type="xsd:string" use="required"/>
		<xsd:attribute name="type" type="xsd:string"/>
		<xsd:attribute name="descr" type="xsd:string"/>
		<xsd:attribute name="unique" default="no">
			<xsd:simpleType>
				<xsd:restriction base="xsd:NMTOKEN">
					<xsd:enumeration value="yes"/>
					<xsd:enumeration value="no"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
		<xsd:attribute name="columns" type="xsd:string"/>
	</xsd:complexType>
	<xsd:complexType name="paramType">
		<xsd:simpleContent>
			<xsd:extension base="xsd:string">
				<xsd:attribute name="name" type="xsd:string" use="required"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
	<xsd:element name="xif">
		<xsd:annotation>
			<xsd:documentation>This is the root tag for a XIF SchemaDoc file.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice maxOccurs="unbounded">
				<xsd:element name="datatype" maxOccurs="unbounded">
					<xsd:annotation>
						<xsd:documentation>Creates a datatype that will provide a specification for what type of data can be stored in a column. Datatypes should be considered "column templates" that allow a programmer to define allowable column types. Datatypes may be inherited from other datatypes, allowing better reuse and object-orientation in relational databases.</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="columnType">
								<xsd:choice>
									<xsd:element name="composite" minOccurs="0">
										<xsd:annotation>
											<xsd:documentation>Specifies a list of one or more columns that should be generated automatically when this datatype is created. This element contains one or more column elements and each of the column elements can use the special $name$ macro for creating special names for the composite columns.</xsd:documentation>
											<xsd:documentation>This element allows a single datatype to automatically generate a group of columns.</xsd:documentation>
										</xsd:annotation>
										<xsd:complexType>
											<xsd:choice>
												<xsd:element name="column" maxOccurs="unbounded">
													<xsd:annotation>
														<xsd:documentation>Creates a specification for a composite column.</xsd:documentation>
													</xsd:annotation>
													<xsd:complexType>
														<xsd:attributeGroup ref="columnType"/>
													</xsd:complexType>
												</xsd:element>
											</xsd:choice>
											<xsd:attribute name="name" type="column-name"/>
										</xsd:complexType>
									</xsd:element>
								</xsd:choice>
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="tabletype" type="tableType" minOccurs="0" maxOccurs="unbounded">
					<xsd:annotation>
						<xsd:documentation>Creates a tabletype that will provide a specification for what a table may contain. Tabletypes should be considered "table templates" or base entity objects. Tabletypes may be inherited from other tabletypes, allowing better reuse and object-orientation in relational databases.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="indextype" minOccurs="0" maxOccurs="unbounded">
					<xsd:annotation>
						<xsd:documentation>Defines an index type like 'unique'. Indextypes are processed in special ways by each DDL skin (ORACLE, SQL Server, etc).</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="description" minOccurs="0">
								<xsd:complexType>
									<xsd:simpleContent>
										<xsd:extension base="xsd:string">
											<xsd:attribute name="dbms" type="xsd:string" use="optional" default="ansi">
												<xsd:annotation>
													<xsd:documentation>The ID of the database for which the sqldefn is being created.</xsd:documentation>
												</xsd:annotation>
											</xsd:attribute>
										</xsd:extension>
									</xsd:simpleContent>
								</xsd:complexType>
							</xsd:element>
						</xsd:sequence>
						<xsd:attribute name="name" type="xsd:string" use="required"/>
						<xsd:attribute name="descr" type="xsd:string" use="required"/>
						<xsd:attribute name="unique" default="no">
							<xsd:simpleType>
								<xsd:restriction base="xsd:NMTOKEN">
									<xsd:enumeration value="yes"/>
									<xsd:enumeration value="no"/>
								</xsd:restriction>
							</xsd:simpleType>
						</xsd:attribute>
						<xsd:attribute name="columns" type="xsd:string"/>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="table" type="tableType" maxOccurs="unbounded">
					<xsd:annotation>
						<xsd:documentation>Creates an actual table in the schema. Each table may optionally be based on one or more tabletypes and may specify a parent table that it is related to.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="include" minOccurs="0" maxOccurs="unbounded">
					<xsd:annotation>
						<xsd:documentation>Merges the contents of other XML files into the current file, allowing encapsulation of XML resources. This tag may be used in any XML file.</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="file" type="xsd:anyURI" use="required"/>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="pre-process" minOccurs="0" maxOccurs="unbounded">
					<xsd:annotation>
						<xsd:documentation>After processing all the include tags, this tag calls a stylesheet and transforms the XML document based on the instructions provided in the style-sheet.</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="style-sheet" type="xsd:anyURI" use="required"/>
					</xsd:complexType>
				</xsd:element>
			</xsd:choice>
			<xsd:attribute name="name" type="xsd:string" use="required"/>
		</xsd:complexType>
	</xsd:element>
	<xsd:complexType name="tableType">
		<xsd:sequence>
			<xsd:element name="param" type="paramType" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Creates a named parameter.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="column" type="columnType" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Defines a table column.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="index" type="indexType" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Defines a table index.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="data" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Specifies generic table data that should be created in the database (insert statements will be automatically generated for this data).</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="enum" type="enumType" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Specifies enumeration table data that should be created in the database (insert statements will be automatically generated for this enumeration data).</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="java-dal-accessor" type="paramType" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Specifies the name of an accessor method that will be automatically generated in the DAL.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="description" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Describes the usage of the table.</xsd:documentation>
				</xsd:annotation>
				<xsd:complexType>
					<xsd:simpleContent>
						<xsd:extension base="xsd:string">
							<xsd:attribute name="dbms" type="xsd:string" use="optional" default="ansi">
								<xsd:annotation>
									<xsd:documentation>The ID of the database for which the sqldefn is being created.</xsd:documentation>
								</xsd:annotation>
							</xsd:attribute>
						</xsd:extension>
					</xsd:simpleContent>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="parent" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Specifies the parent of this table (but does not generate a physical relationship through a foriegn-key, just a logcal one through documentation and ERD).</xsd:documentation>
				</xsd:annotation>
				<xsd:complexType>
					<xsd:simpleContent>
						<xsd:extension base="xsd:string">
							<xsd:attribute name="dbms" type="xsd:string" use="optional" default="ansi">
								<xsd:annotation>
									<xsd:documentation>The ID of the database for which the sqldefn is being created.</xsd:documentation>
								</xsd:annotation>
							</xsd:attribute>
						</xsd:extension>
					</xsd:simpleContent>
				</xsd:complexType>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="name" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>The name of the table. Each table is named as a singular, not plural, noun with title case. For instance, you have a Person table not People table. Each tables' name's words are separated by an underscore and capitalized. For example, use Person_Login not personLogin. Table names are case-sensitive.
</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="abbrev" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>A 3 or 4 character abbreviation of the table name. This abbreviation is used in the DDL to generate proper constraint names, index names, etc.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="type" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>The tabletype of the table. This name must refer to an existing tabletype. A table type is a set of one or more column definitions. So when you create a table based on a table type, that table will include all the columns of the table type as well as its own. Using table types, you can quickly and consistently create similar tables that are automatically updated whenever the tabletypes change.
</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="parent" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>The name of an existing table that will create a parent-child relationship between this table and the other table. This relationship does not generate a foreign-key relationship -- its is merely to represent the relationship in the ACE documentation. If you want to generate a real foreign-key relationship, use the parentref attribute in the column element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:complexType name="transformType">
		<xsd:simpleContent>
			<xsd:extension base="xsd:string">
				<xsd:attribute name="method" use="required">
					<xsd:simpleType>
						<xsd:restriction base="xsd:NMTOKEN">
							<xsd:enumeration value="uppercase"/>
							<xsd:enumeration value="lowercase"/>
						</xsd:restriction>
					</xsd:simpleType>
				</xsd:attribute>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
	<xsd:complexType name="validateType">
		<xsd:simpleContent>
			<xsd:extension base="xsd:string">
				<xsd:attribute name="method" use="required">
					<xsd:simpleType>
						<xsd:restriction base="xsd:NMTOKEN">
							<xsd:enumeration value="constraint"/>
							<xsd:enumeration value="trigger"/>
						</xsd:restriction>
					</xsd:simpleType>
				</xsd:attribute>
				<xsd:attribute name="type" use="required">
					<xsd:simpleType>
						<xsd:restriction base="xsd:NMTOKEN">
							<xsd:enumeration value="numset"/>
							<xsd:enumeration value="numrange"/>
							<xsd:enumeration value="textset"/>
						</xsd:restriction>
					</xsd:simpleType>
				</xsd:attribute>
				<xsd:attribute name="set" type="xsd:string" use="required"/>
				<xsd:attribute name="setdelim" type="xsd:string" default=","/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
	<xsd:simpleType name="yes-no">
		<xsd:annotation>
			<xsd:documentation>A simple yes/no enumeration. </xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="no"/>
			<xsd:enumeration value="yes"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="data-type-name">
		<xsd:annotation>
			<xsd:documentation>The name of a datatype element.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string"/>
	</xsd:simpleType>
	<xsd:simpleType name="data-type-names">
		<xsd:annotation>
			<xsd:documentation>A comma-separated list of names of existing datatype elements.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string"/>
	</xsd:simpleType>
	<xsd:simpleType name="table-type-name">
		<xsd:annotation>
			<xsd:documentation>The name of a tabletype element.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string"/>
	</xsd:simpleType>
	<xsd:simpleType name="table-type-names">
		<xsd:annotation>
			<xsd:documentation>A comma-separated list of names of existing tabletype elements.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string"/>
	</xsd:simpleType>
	<xsd:simpleType name="table-column-name-ref">
		<xsd:annotation>
			<xsd:documentation>A fully qualfied table/colum name like Table_Name.Column_Name.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string"/>
	</xsd:simpleType>
	<xsd:simpleType name="java-identifier">
		<xsd:annotation>
			<xsd:documentation>A Java identifier.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string"/>
	</xsd:simpleType>
	<xsd:simpleType name="column-name">
		<xsd:annotation>
			<xsd:documentation>The name of a column.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string"/>
	</xsd:simpleType>
	<xsd:attributeGroup name="columnType">
		<xsd:annotation>
			<xsd:documentation>Basic attributes that apply to datatypes and columns</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="name" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>The name of the object. Each column or datatype is usually named as a singular noun in all lower case with each word inside a name separated by underscores. For instance, person_id is a good column name but personid is harder to read.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="type" type="data-type-name">
			<xsd:annotation>
				<xsd:documentation>The name of datatype to inherit. All of the attributes and elements from the other datatype will be inherited and any attributes and elements defined in this datatype will override those values.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="usetype" type="table-column-name-ref">
			<xsd:annotation>
				<xsd:documentation>Format is "Table_X.Column_Y". This attributes instructs the XIF to look up the type definition of Column_Y in Table_X and copy the type definition for the foreign column. This is a special way of maintaining that two columns share the same datatype and size.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="parentref" type="table-column-name-ref">
			<xsd:annotation>
				<xsd:documentation>Format is "Table_X.Column_Y". Specifies a parent/child foreign key relationship which indicates that Table_X is a parent of the defining column using Column_Yų value (creates a 1:N relationship between Table_X and this column).</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="selfref" type="table-column-name-ref">
			<xsd:annotation>
				<xsd:documentation>Format is "Table_X.Column_Y". Specifies a a self-referential foreign key relationship which indicates that Table_X Column_Y is used to maintain an internal hierarchy (creates a 1:N relationship between itself).</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="lookupref" type="table-column-name-ref">
			<xsd:annotation>
				<xsd:documentation>Format is "Table_X.Column_Y". Specifies a general foreign key relationship from the defining column which references the foreign Column_Y of Table_X (creates a 1:1 or 1:N relationship between defining column and the referenced column).</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="size" type="xsd:integer">
			<xsd:annotation>
				<xsd:documentation>The size attribute of the specified data type. What the size means depends on the data type. For example, in text fields, it specifies the number of characters used. The value of this field is replaced in the sqldefn element using the %size% macro.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="primarykey" type="yes-no" default="no">
			<xsd:annotation>
				<xsd:documentation>Specifies whether or not this column is a primary key. Once a single primary key per table is supported.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="required" type="yes-no" default="no">
			<xsd:annotation>
				<xsd:documentation>Specifies whether or not this column is a required column. If the column is required, XIF generates a not null constraint.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="unique" type="yes-no" default="no">
			<xsd:annotation>
				<xsd:documentation>Specifies whether this column's values should be unique (meaning no two rows should share the same value for this column). When this value is set to yes, this attribute creates a unique index based on this single column. If more than one column needs to be unique (as a composite), use the index child element of the table element to create a unique index based on multiple columns.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="indexed" type="yes-no" default="no">
			<xsd:annotation>
				<xsd:documentation>Specifies whether this column's values should be index (for increasing search performance). When this value is set to yes, this attribute creates a search index based on this single column. If more than one column needs to be unique (as a composite), use the index child element of the table element to create an index based on multiple columns.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="descr" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>Specifies usage information for the column.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="default" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>Specifies the SQL expression  that will be used as the column's default value in the SQL create table statement.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:attributeGroup>
</xsd:schema>
